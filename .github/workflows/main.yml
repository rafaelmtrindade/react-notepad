name: CI/CD Workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies and Lint
        run: |
          cd frontend && npm install && npx eslint . && cd ..
          cd backend && npm install && npx eslint .

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies and run tests
        run: |
          cd frontend
          npm install
          npm test --if-present
          npm run build

  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Dependencies and run tests
        run: |
          cd backend
          npm install
          npm test --if-present

  # deploy:
  #   needs: [lint, frontend-tests, backend-tests]
  #   runs-on: ubuntu-latest
  #   env:
  #     DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  #     DEPLOY_PASSWORD: ${{ secrets.DEPLOY_USER_PASSWORD }}
  #     DEPLOY_MACHINE: ${{ secrets.DEPLOY_MACHINE }}
  #     PROJECT_FOLDER: ${{ secrets.PROJECT_FOLDER }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #     - name: Set up SSH key
  #       uses: webfactory/ssh-agent@v0.4.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  #     - name: Copy Code to Deploy Machine
  #       run: scp -r -o StrictHostKeyChecking=no . $DEPLOY_USER@$DEPLOY_MACHINE:$PROJECT_FOLDER
  #     - name: Set Environment Variables and Deploy with Docker Compose
  #       env:
  #         ENV_VARIABLE_1: ${{ secrets.ENV_VARIABLE_1 }}
  #         ENV_VARIABLE_2: ${{ secrets.ENV_VARIABLE_2 }}
  #       run: |
  #         echo "export ENV_VARIABLE_1=${ENV_VARIABLE_1}\n" > setenv.sh
  #         echo "export ENV_VARIABLE_2=${ENV_VARIABLE_2}\n" >> setenv.sh
  #         echo "cd $PROJECT_FOLDER\n" >> setenv.sh
  #         echo "echo ${DEPLOY_PASSWORD} | sudo -S docker-compose down" >> setenv.sh
  #         echo 'sudo docker container prune -f' >> setenv.sh
  #         echo 'sudo docker image prune -f' >> setenv.sh
  #         echo 'sudo docker compose up -d --build' >> setenv.sh
  #         scp -o StrictHostKeyChecking=no setenv.sh $DEPLOY_USER@$DEPLOY_MACHINE:$PROJECT_FOLDER
  #         ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_MACHINE "bash $PROJECT_FOLDER/setenv.sh"
  #         ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_MACHINE "rm $PROJECT_FOLDER/setenv.sh"
  #         rm setenv.sh
